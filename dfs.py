def dfs(graph, start, end, max_length):
    fringe = [(start, [])]
    while fringe:
        state, path = fringe.pop()
        if len(path) >= max_length:
            continue
        if path and state == end:
            yield path
            continue
        for next_state in graph[state]:
            if next_state in path:
                continue
            fringe.append((next_state, path+[next_state]))

# graph = {0: [14, 17, 18, 6, 13], 1: [0], 2: [0], 3: [0], 4: [0], 5: [2, 9, 10, 11, 17, 18, 30, 46, 57, 81, 100], 6: [2, 9, 10, 11, 17, 18, 30, 46, 57, 81, 100], 7: [2, 9, 10, 11, 17, 18, 30, 46, 57, 81, 100], 8: [2, 9, 10, 11, 17, 18, 30, 46, 57, 81, 100], 9: [5, 6, 7, 13, 14, 17, 18, 19, 20, 30, 41, 42, 43, 49, 50, 51, 86], 10: [5, 6, 7, 13, 14, 17, 18, 19, 20, 30, 41, 42, 43, 49, 50, 51, 86], 11: [5, 6, 7, 13, 14, 17, 18, 19, 20, 30, 41, 42, 43, 49, 50, 51, 86], 12: [5, 6, 7, 13, 14, 17, 18, 19, 20, 30, 41, 42, 43, 49, 50, 51, 86], 13: [1, 2, 9, 10, 17, 18, 29, 30, 42, 50], 14: [1, 2, 9, 10, 17, 18, 29, 30, 42, 50], 15: [1, 2, 9, 10, 17, 18, 29, 30, 42, 50], 16: [1, 2, 9, 10, 17, 18, 29, 30, 42, 50], 17: [1, 2, 5, 6, 9, 10, 11, 12, 13, 14, 21, 22, 26, 29, 30, 34, 38, 41, 42, 43, 44, 46, 49, 50, 53, 54, 57, 58, 61, 62, 69, 73, 74, 77, 78, 81, 82, 85, 86, 88, 100], 18: [1, 2, 5, 6, 9, 10, 11, 12, 13, 14, 21, 22, 26, 29, 30, 34, 38, 41, 42, 43, 44, 46, 49, 50, 53, 54, 57, 58, 61, 62, 69, 73, 74, 77, 78, 81, 82, 85, 86, 88, 100], 19: [1, 2, 5, 6, 9, 10, 11, 12, 13, 14, 21, 22, 26, 29, 30, 34, 38, 41, 42, 43, 44, 46, 49, 50, 53, 54, 57, 58, 61, 62, 69, 73, 74, 77, 78, 81, 82, 85, 86, 88, 100], 20: [1, 2, 5, 6, 9, 10, 11, 12, 13, 14, 21, 22, 26, 29, 30, 34, 38, 41, 42, 43, 44, 46, 49, 50, 53, 54, 57, 58, 61, 62, 69, 73, 74, 77, 78, 81, 82, 85, 86, 88, 100], 21: [17, 18], 22: [17, 18], 23: [17, 18], 24: [17, 18], 25: [18], 26: [18], 27: [18], 28: [18], 29: [6, 10, 13, 14, 17, 18], 30: [6, 10, 13, 14, 17, 18], 31: [6, 10, 13, 14, 17, 18], 32: [6, 10, 13, 14, 17, 18], 33: [18], 34: [18], 35: [18], 36: [18], 37: [18], 38: [18], 39: [18], 40: [18], 41: [9, 10, 11, 14, 17, 18, 19, 20, 50, 74, 94, 96, 100], 42: [9, 10, 11, 14, 17, 18, 19, 20, 50, 74, 94, 96, 100], 43: [9, 10, 11, 14, 17, 18, 19, 20, 50, 74, 94, 96, 100], 44: [9, 10, 11, 14, 17, 18, 19, 20, 50, 74, 94, 96, 100], 45: [6, 18], 46: [6, 18], 47: [6, 18], 48: [6, 18], 49: [9, 10, 11, 14, 17, 18, 42, 73], 50: [9, 10, 11, 14, 17, 18, 42, 73], 51: [9, 10, 11, 14, 17, 18, 42, 73], 52: [9, 10, 11, 14, 17, 18, 42, 73], 53: [17, 18], 54: [17, 18], 55: [17, 18], 56: [17, 18], 57: [5, 17, 18], 58: [5, 17, 18], 59: [5, 17, 18], 60: [5, 17, 18], 61: [17, 18], 62: [17, 18], 63: [17, 18], 64: [17, 18], 65: [], 66: [], 67: [], 68: [], 69: [17], 70: [17], 71: [17], 72: [17], 73: [17, 18, 42, 49], 74: [17, 18, 42, 49], 75: [17, 18, 42, 49], 76: [17, 18, 42, 49], 77: [17, 18], 78: [17, 18], 79: [17, 18], 80: [17, 18], 81: [5, 17, 18], 82: [5, 17, 18], 83: [5, 17, 18], 84: [5, 17, 18], 85: [10, 17, 18, 20], 86: [10, 17, 18, 20], 87: [10, 17, 18, 20], 88: [10, 17, 18, 20], 89: [], 90: [], 91: [], 92: [], 93: [42, 44], 94: [42, 44], 95: [42, 44], 96: [42, 44], 97: [8, 20, 44], 98: [8, 20, 44], 99: [8, 20, 44], 100: [8, 20, 44]}

# cycles_generator = dfs(graph, 0, 0, 8)
# cycles = filter(lambda cycle: len(cycle) > 2, cycles_generator)
# i = 0
# for cycle in cycles:
#     i+=1
#     if i % 1000 == 0:
#         print(f"{i}, {cycle}")